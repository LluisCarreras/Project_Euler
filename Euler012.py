# -*- coding: utf-8 -*-
"""
Created on Fri Jan  8 14:32:20 2016
@author: Llu√≠s Carreras

Highly divisible triangular number
Problem 12

The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""


import math

def search_divisors(number):
    divisors = [1, number]
    for i in range(2, int(math.sqrt(number)) + 1):
        if number % i == 0:
            divisors.append(i)
            divisors.append(round(number / i))
    return sorted(divisors)
    
def triangular_number(n):
    num_divisors = 2
    number = 1
    next_number = 1
    while num_divisors <= n:
        next_number += 1
        number += next_number 
        divisors = search_divisors(number)
        num_divisors = len(divisors)
              
        print(num_divisors, "\t", next_number, "\t", number)
        #print(number, "\t", divisors)
    return number

n = 500       
first_triangle_with_over_n_divisors = triangular_number(n)
print("\nOutcome: ", first_triangle_with_over_n_divisors)
