# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 16:39:33 2016

@author: Lluís Carreras González

Pentagon numbers
Problem 44

Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten 
pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 
70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and 
difference are pentagonal and D = |Pk − Pj| is minimised; what is the 
value of D?
"""


import math


def pentagonal(num):
    """
    Create the pentagonal number Pn = n(3n-1)/2 for the given number.
    """
    
    return int(0.5 * num * (3 * num - 1))
    
    
def is_pentagonal(num, pentagonals):
    """
    Checks if a given number is pentagonal, checking wether the number is
    in the given list of pentagonal numbers.
    """
    
    return num in pentagonals
    
    
def is_penta(num):
    pivot = math.sqrt(num)
    for n in range(int(0.5 * pivot), int((3 / 2) * pivot) + 10):
        if pentagonal(n) == num:
            return True
    return False
    
    
def pentagonals(num):
    """
    Return a list with the n first pentagonal numbers.
    """
    
    return [pentagonal(n) for n in range(1, num + 1)]
    
    
#n_max = 10000  
#my_pentas = pentagonals(n_max)
##print(my_pentas)
#d_list= []
#ps = []
#
#for idx_1 in range(n_max - 1):
#    #print(idx_1)
#    for idx_2 in range(idx_1 + 1, len(my_pentas)):
#        pentas_sum = my_pentas[idx_1] + my_pentas[idx_2]
#        if pentas_sum in my_pentas:
#            pentas_diff = my_pentas[idx_2] - my_pentas[idx_1]
#            print(idx_1, "\t", idx_2, "\t", pentas_sum, "\t", pentas_diff)  
#            if pentas_diff in my_pentas:
##            print(idx_1, "\t", idx_2, "\t", pentas_sum, "\t", pentas_diff)
#                d_list.append(pentas_diff)
#                print(d_list)
#                ps.append([my_pentas[idx_1], my_pentas[idx_2]])
#
#print(d_list)
#print(ps)

pentas = []
for n in range(1, 100):
    print(n)
    if is_penta(n):
        print(n, "\t", pentagonal(n))
        pentas.append(pentagonal(n))
        
print(pentas)
